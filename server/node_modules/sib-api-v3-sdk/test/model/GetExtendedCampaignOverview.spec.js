/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetExtendedCampaignOverview', function() {
      beforeEach(function() {
        instance = new SibApiV3Sdk.GetExtendedCampaignOverview();
      });

      it('should create an instance of GetExtendedCampaignOverview', function() {
        // TODO: update the code to test GetExtendedCampaignOverview
        expect(instance).to.be.a(SibApiV3Sdk.GetExtendedCampaignOverview);
      });

      it('should have the property testSent (base name: "testSent")', function() {
        // TODO: update the code to test the property testSent
        expect(instance).to.have.property('testSent');
        // expect(instance.testSent).to.be(expectedValueLiteral);
      });

      it('should have the property header (base name: "header")', function() {
        // TODO: update the code to test the property header
        expect(instance).to.have.property('header');
        // expect(instance.header).to.be(expectedValueLiteral);
      });

      it('should have the property footer (base name: "footer")', function() {
        // TODO: update the code to test the property footer
        expect(instance).to.have.property('footer');
        // expect(instance.footer).to.be(expectedValueLiteral);
      });

      it('should have the property sender (base name: "sender")', function() {
        // TODO: update the code to test the property sender
        expect(instance).to.have.property('sender');
        // expect(instance.sender).to.be(expectedValueLiteral);
      });

      it('should have the property replyTo (base name: "replyTo")', function() {
        // TODO: update the code to test the property replyTo
        expect(instance).to.have.property('replyTo');
        // expect(instance.replyTo).to.be(expectedValueLiteral);
      });

      it('should have the property toField (base name: "toField")', function() {
        // TODO: update the code to test the property toField
        expect(instance).to.have.property('toField');
        // expect(instance.toField).to.be(expectedValueLiteral);
      });

      it('should have the property htmlContent (base name: "htmlContent")', function() {
        // TODO: update the code to test the property htmlContent
        expect(instance).to.have.property('htmlContent');
        // expect(instance.htmlContent).to.be(expectedValueLiteral);
      });

      it('should have the property shareLink (base name: "shareLink")', function() {
        // TODO: update the code to test the property shareLink
        expect(instance).to.have.property('shareLink');
        // expect(instance.shareLink).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedAt (base name: "modifiedAt")', function() {
        // TODO: update the code to test the property modifiedAt
        expect(instance).to.have.property('modifiedAt');
        // expect(instance.modifiedAt).to.be(expectedValueLiteral);
      });

      it('should have the property inlineImageActivation (base name: "inlineImageActivation")', function() {
        // TODO: update the code to test the property inlineImageActivation
        expect(instance).to.have.property('inlineImageActivation');
        // expect(instance.inlineImageActivation).to.be(expectedValueLiteral);
      });

      it('should have the property mirrorActive (base name: "mirrorActive")', function() {
        // TODO: update the code to test the property mirrorActive
        expect(instance).to.have.property('mirrorActive');
        // expect(instance.mirrorActive).to.be(expectedValueLiteral);
      });

      it('should have the property recurring (base name: "recurring")', function() {
        // TODO: update the code to test the property recurring
        expect(instance).to.have.property('recurring');
        // expect(instance.recurring).to.be(expectedValueLiteral);
      });

      it('should have the property sentDate (base name: "sentDate")', function() {
        // TODO: update the code to test the property sentDate
        expect(instance).to.have.property('sentDate');
        // expect(instance.sentDate).to.be(expectedValueLiteral);
      });

      it('should have the property returnBounce (base name: "returnBounce")', function() {
        // TODO: update the code to test the property returnBounce
        expect(instance).to.have.property('returnBounce');
        // expect(instance.returnBounce).to.be(expectedValueLiteral);
      });

    });
  });

}));
