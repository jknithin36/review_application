/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.ResellerApi();
  });

  describe('(package)', function() {
    describe('ResellerApi', function() {
      describe('addCredits', function() {
        it('should call addCredits successfully', function(done) {
          // TODO: uncomment, update parameter values for addCredits call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";
          var addCredits = new SibApiV3Sdk.AddCredits();
          addCredits.sms = 450;
          addCredits.email = 1200;

          instance.addCredits(childIdentifier, addCredits).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.RemainingCreditModel);
            expect(data.child).to.be.a(SibApiV3Sdk.RemainingCreditModelChild);
                  expect(data.child.sms).to.be.a('number');
              expect(data.child.sms).to.be(500.0);
              expect(data.child.email).to.be.a('number');
              expect(data.child.email).to.be(2000.0);
            expect(data.reseller).to.be.a(SibApiV3Sdk.RemainingCreditModelReseller);
                  expect(data.reseller.sms).to.be.a('number');
              expect(data.reseller.sms).to.be(12900.0);
              expect(data.reseller.email).to.be.a('number');
              expect(data.reseller.email).to.be(2000000.0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('associateIpToChild', function() {
        it('should call associateIpToChild successfully', function(done) {
          // TODO: uncomment, update parameter values for associateIpToChild call
          /*
          var childIdentifier = "childIdentifier_example";
          var ip = new SibApiV3Sdk.ManageIp();
          ip.ip = "123.65.8.22";

          instance.associateIpToChild(childIdentifier, ip).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createChildDomain', function() {
        it('should call createChildDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for createChildDomain call
          /*
          var childIdentifier = "childIdentifier_example";
          var addChildDomain = new SibApiV3Sdk.AddChildDomain();
          addChildDomain.domain = "mychilddomain.com";

          instance.createChildDomain(childIdentifier, addChildDomain).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createResellerChild', function() {
        it('should call createResellerChild successfully', function(done) {
          // TODO: uncomment, update parameter values for createResellerChild call and complete the assertions
          /*
          var opts = {};
          opts.resellerChild = new SibApiV3Sdk.CreateChild();
          opts.resellerChild.email = "josh.cruise@example.com";
          opts.resellerChild.firstName = "Josh";
          opts.resellerChild.lastName = "Cruise";
          opts.resellerChild.companyName = "Your Company";
          opts.resellerChild.password = "Pa55w0rd65";
          opts.resellerChild.language = "en";

          instance.createResellerChild(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateReseller);
            expect(data.authKey).to.be.a('string');
            expect(data.authKey).to.be("xkeysib-21881axxxxxcc92e04-mIrexxxx7z");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1234567);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteChildDomain', function() {
        it('should call deleteChildDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteChildDomain call
          /*
          var childIdentifier = "childIdentifier_example";
          var domainName = "domainName_example";

          instance.deleteChildDomain(childIdentifier, domainName).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteResellerChild', function() {
        it('should call deleteResellerChild successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteResellerChild call
          /*
          var childIdentifier = "childIdentifier_example";

          instance.deleteResellerChild(childIdentifier).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dissociateIpFromChild', function() {
        it('should call dissociateIpFromChild successfully', function(done) {
          // TODO: uncomment, update parameter values for dissociateIpFromChild call
          /*
          var childIdentifier = "childIdentifier_example";
          var ip = new SibApiV3Sdk.ManageIp();
          ip.ip = "123.65.8.22";

          instance.dissociateIpFromChild(childIdentifier, ip).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChildAccountCreationStatus', function() {
        it('should call getChildAccountCreationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getChildAccountCreationStatus call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";

          instance.getChildAccountCreationStatus(childIdentifier).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetChildAccountCreationStatus);
            expect(data.childAccountCreated).to.be.a('boolean');
            expect(data.childAccountCreated).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChildDomains', function() {
        it('should call getChildDomains successfully', function(done) {
          // TODO: uncomment, update parameter values for getChildDomains call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";

          instance.getChildDomains(childIdentifier).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetChildDomains);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChildInfo', function() {
        it('should call getChildInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getChildInfo call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";

          instance.getChildInfo(childIdentifier).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetChildInfo);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("john.smith@example.com");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("John");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Smith");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("MyCompany");
            expect(data.credits).to.be.a(SibApiV3Sdk.GetChildInfoCredits);
                  expect(data.credits.emailCredits).to.be.a('number');
              expect(data.credits.emailCredits).to.be(98555);
              expect(data.credits.smsCredits).to.be.a('number');
              expect(data.credits.smsCredits).to.be(87556);
            expect(data.statistics).to.be.a(SibApiV3Sdk.GetChildInfoStatistics);
                  expect(data.statistics.previousMonthTotalSent).to.be.a('number');
              expect(data.statistics.previousMonthTotalSent).to.be(7654);
              expect(data.statistics.currentMonthTotalSent).to.be.a('number');
              expect(data.statistics.currentMonthTotalSent).to.be(4566);
              expect(data.statistics.totalSent).to.be.a('number');
              expect(data.statistics.totalSent).to.be(987554);
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("abC01De2fGHI3jkL");
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.apiKeys).to.be.a(SibApiV3Sdk.GetChildInfoApiKeys);
                  {
                let dataCtr = data.apiKeys.v2;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetChildInfoApiKeysV2);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("N˚2");
                  expect(data.key).to.be.a('string');
                  expect(data.key).to.be("nOpxxxxxy7z");
  
                        }
              }
              {
                let dataCtr = data.apiKeys.v3;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetChildInfoApiKeysV3);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("N˚3");
                  expect(data.key).to.be.a('string');
                  expect(data.key).to.be("xkeysib-21881axxxxxcc92e04-mIrexxxx7z");
  
                        }
              }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getResellerChilds', function() {
        it('should call getResellerChilds successfully', function(done) {
          // TODO: uncomment, update parameter values for getResellerChilds call and complete the assertions
          /*
          var opts = {};
          opts.limit = 10;
          opts.offset = 0;

          instance.getResellerChilds(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetChildrenList);
            {
              let dataCtr = data.children;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(24);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSsoToken', function() {
        it('should call getSsoToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getSsoToken call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";

          instance.getSsoToken(childIdentifier).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetSsoToken);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("ede520dxxxxxxxxxxxx76d631fba2");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeCredits', function() {
        it('should call removeCredits successfully', function(done) {
          // TODO: uncomment, update parameter values for removeCredits call and complete the assertions
          /*
          var childIdentifier = "childIdentifier_example";
          var removeCredits = new SibApiV3Sdk.RemoveCredits();
          removeCredits.sms = 300;
          removeCredits.email = 500;

          instance.removeCredits(childIdentifier, removeCredits).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.RemainingCreditModel);
            expect(data.child).to.be.a(SibApiV3Sdk.RemainingCreditModelChild);
                  expect(data.child.sms).to.be.a('number');
              expect(data.child.sms).to.be(500.0);
              expect(data.child.email).to.be.a('number');
              expect(data.child.email).to.be(2000.0);
            expect(data.reseller).to.be.a(SibApiV3Sdk.RemainingCreditModelReseller);
                  expect(data.reseller.sms).to.be.a('number');
              expect(data.reseller.sms).to.be(12900.0);
              expect(data.reseller.email).to.be.a('number');
              expect(data.reseller.email).to.be(2000000.0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateChildAccountStatus', function() {
        it('should call updateChildAccountStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateChildAccountStatus call
          /*
          var childIdentifier = "childIdentifier_example";
          var updateChildAccountStatus = new SibApiV3Sdk.UpdateChildAccountStatus();
          updateChildAccountStatus.transactionalEmail = false;
          updateChildAccountStatus.transactionalSms = false;
          updateChildAccountStatus.marketingAutomation = true;
          updateChildAccountStatus.smsCampaign = true;

          instance.updateChildAccountStatus(childIdentifier, updateChildAccountStatus).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateChildDomain', function() {
        it('should call updateChildDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for updateChildDomain call
          /*
          var childIdentifier = "childIdentifier_example";
          var domainName = "domainName_example";
          var updateChildDomain = new SibApiV3Sdk.UpdateChildDomain();
          updateChildDomain.domain = "myupdateddomain.com";

          instance.updateChildDomain(childIdentifier, domainName, updateChildDomain).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateResellerChild', function() {
        it('should call updateResellerChild successfully', function(done) {
          // TODO: uncomment, update parameter values for updateResellerChild call
          /*
          var childIdentifier = "childIdentifier_example";
          var resellerChild = new SibApiV3Sdk.UpdateChild();
          resellerChild.email = "josh.cruise@example.com";
          resellerChild.firstName = "Josh";
          resellerChild.lastName = "Cruise";
          resellerChild.companyName = "Your Company";
          resellerChild.password = "Pa55w0rd65";

          instance.updateResellerChild(childIdentifier, resellerChild).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
