/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.ContactsApi();
  });

  describe('(package)', function() {
    describe('ContactsApi', function() {
      describe('addContactToList', function() {
        it('should call addContactToList successfully', function(done) {
          // TODO: uncomment, update parameter values for addContactToList call and complete the assertions
          /*
          var listId = 789;
          var contactEmails = new SibApiV3Sdk.AddContactToList();
          contactEmails.emails = ["john.smith@contact.com"];
          contactEmails.ids = [121];

          instance.addContactToList(listId, contactEmails).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.PostContactInfo);
            expect(data.contacts).to.be.a(SibApiV3Sdk.PostContactInfoContacts);
                  {
                let dataCtr = data.contacts.success;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("jeff32@example.com, jim56@example.com");
                }
              }
              {
                let dataCtr = data.contacts.failure;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("jeff32@example.com, jim56@example.com");
                }
              }
              expect(data.contacts.total).to.be.a('number');
              expect(data.contacts.total).to.be(27);
              expect(data.contacts.processId).to.be.a('number');
              expect(data.contacts.processId).to.be(78);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAttribute', function() {
        it('should call createAttribute successfully', function(done) {
          // TODO: uncomment, update parameter values for createAttribute call
          /*
          var attributeCategory = "attributeCategory_example";
          var attributeName = "attributeName_example";
          var createAttribute = new SibApiV3Sdk.CreateAttribute();
          createAttribute.value = "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]";
          createAttribute.isRecurring = true;
          createAttribute.enumeration = [new SibApiV3Sdk.CreateAttributeEnumeration()];
          createAttribute.enumeration[0].value = 1;
          createAttribute.enumeration[0].label = "Women";
          createAttribute.type = "text";

          instance.createAttribute(attributeCategory, attributeName, createAttribute).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createContact', function() {
        it('should call createContact successfully', function(done) {
          // TODO: uncomment, update parameter values for createContact call and complete the assertions
          /*
          var createContact = new SibApiV3Sdk.CreateContact();
          createContact.email = "elly@example.com";
          createContact.attributes = {"FNAME":"Elly","LNAME":"Roger"};
          createContact.emailBlacklisted = false;
          createContact.smsBlacklisted = false;
          createContact.listIds = [36];
          createContact.updateEnabled = false;
          createContact.smtpBlacklistSender = [""];

          instance.createContact(createContact).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateUpdateContactModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDoiContact', function() {
        it('should call createDoiContact successfully', function(done) {
          // TODO: uncomment, update parameter values for createDoiContact call
          /*
          var createDoiContact = new SibApiV3Sdk.CreateDoiContact();
          createDoiContact.email = "elly@example.com";
          createDoiContact.attributes = {"FNAME":"Elly","LNAME":"Roger"};
          createDoiContact.includeListIds = [36];
          createDoiContact.excludeListIds = [36];
          createDoiContact.templateId = 2;
          createDoiContact.redirectionUrl = "http://requestb.in/173lyyx1";

          instance.createDoiContact(createDoiContact).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFolder', function() {
        it('should call createFolder successfully', function(done) {
          // TODO: uncomment, update parameter values for createFolder call and complete the assertions
          /*
          var createFolder = new SibApiV3Sdk.CreateUpdateFolder();
          createFolder.name = "Wordpress Contacts";

          instance.createFolder(createFolder).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createList', function() {
        it('should call createList successfully', function(done) {
          // TODO: uncomment, update parameter values for createList call and complete the assertions
          /*
          var createList = new SibApiV3Sdk.CreateList();
          createList.name = "Magento Customer - ES";
          createList.folderId = 2;

          instance.createList(createList).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAttribute', function() {
        it('should call deleteAttribute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAttribute call
          /*
          var attributeCategory = "attributeCategory_example";
          var attributeName = "attributeName_example";

          instance.deleteAttribute(attributeCategory, attributeName).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContact', function() {
        it('should call deleteContact successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContact call
          /*
          var identifier = "identifier_example";

          instance.deleteContact(identifier).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFolder', function() {
        it('should call deleteFolder successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFolder call
          /*
          var folderId = 789;

          instance.deleteFolder(folderId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteList', function() {
        it('should call deleteList successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteList call
          /*
          var listId = 789;

          instance.deleteList(listId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAttributes', function() {
        it('should call getAttributes successfully', function(done) {
          // TODO: uncomment getAttributes call and complete the assertions
          /*

          instance.getAttributes().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetAttributes);
            {
              let dataCtr = data.attributes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetAttributesAttributes);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("LASTNAME");
                expect(data.category).to.be.a('string');
                expect(data.category).to.be("category");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("text");
                {
                  let dataCtr = data.enumeration;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SibApiV3Sdk.GetAttributesEnumeration);
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(1);
                    expect(data.label).to.be.a('string');
                    expect(data.label).to.be("Women");
    
                          }
                }
                expect(data.calculatedValue).to.be.a('string');
                expect(data.calculatedValue).to.be("COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactInfo', function() {
        it('should call getContactInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactInfo call and complete the assertions
          /*
          var identifier = "identifier_example";
          var opts = {};
          opts.startDate = null;
          opts.endDate = null;

          instance.getContactInfo(identifier, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetails);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("john.smith@example.com");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(32);
            expect(data.emailBlacklisted).to.be.a('boolean');
            expect(data.emailBlacklisted).to.be(false);
            expect(data.smsBlacklisted).to.be.a('boolean');
            expect(data.smsBlacklisted).to.be(true);
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("2017-05-12T12:30:00Z");
            expect(data.modifiedAt).to.be.a('string');
            expect(data.modifiedAt).to.be("2017-05-12T12:30:00Z");
            {
              let dataCtr = data.listIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(12,9,20);
              }
            }
            {
              let dataCtr = data.listUnsubscribed;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(1,2);
              }
            }
            expect(data.attributes).to.be.a(Object);
            expect(data.attributes).to.be({"name":"Joe","email":"joe@example.com"});
            expect(data.statistics).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatistics);
                  {
                let dataCtr = data.statistics.messagesSent;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
  
                        }
              }
              {
                let dataCtr = data.statistics.hardBounces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
  
                        }
              }
              {
                let dataCtr = data.statistics.softBounces;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
  
                        }
              }
              {
                let dataCtr = data.statistics.complaints;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
  
                        }
              }
              expect(data.statistics.unsubscriptions).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptions);
                    {
                  let dataCtr = data.statistics.unsubscriptions.userUnsubscription;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription);
                    expect(data.campaignId).to.be.a('number');
                    expect(data.campaignId).to.be(3);
                    expect(data.eventTime).to.be.a('string');
                    expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("165.87.3.15");
    
                          }
                }
                {
                  let dataCtr = data.statistics.unsubscriptions.adminUnsubscription;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription);
                    expect(data.eventTime).to.be.a('string');
                    expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("165.87.3.15");
    
                          }
                }
              {
                let dataCtr = data.statistics.opened;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsOpened);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(1);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                  expect(data.ip).to.be.a('string');
                  expect(data.ip).to.be("165.87.3.15");
  
                        }
              }
              {
                let dataCtr = data.statistics.clicked;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsClicked);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  {
                    let dataCtr = data.links;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsLinks);
                      expect(data.count).to.be.a('number');
                      expect(data.count).to.be(1);
                      expect(data.eventTime).to.be.a('string');
                      expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                      expect(data.ip).to.be.a('string');
                      expect(data.ip).to.be("165.87.3.15");
                      expect(data.url).to.be.a('string');
                      expect(data.url).to.be("www.myshop.com");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.statistics.transacAttributes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.statistics.delivered;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsDelivered);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13.000+00:00");
  
                        }
              }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactStats', function() {
        it('should call getContactStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactStats call and complete the assertions
          /*
          var identifier = "identifier_example";
          var opts = {};
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";

          instance.getContactStats(identifier, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetContactCampaignStats);
            {
              let dataCtr = data.messagesSent;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");

                      }
            }
            {
              let dataCtr = data.hardBounces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");

                      }
            }
            {
              let dataCtr = data.softBounces;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");

                      }
            }
            {
              let dataCtr = data.complaints;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");

                      }
            }
            expect(data.unsubscriptions).to.be.a(SibApiV3Sdk.GetContactCampaignStatsUnsubscriptions);
                  {
                let dataCtr = data.unsubscriptions.userUnsubscription;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription);
                  expect(data.campaignId).to.be.a('number');
                  expect(data.campaignId).to.be(3);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                  expect(data.ip).to.be.a('string');
                  expect(data.ip).to.be("165.87.3.15");
  
                        }
              }
              {
                let dataCtr = data.unsubscriptions.adminUnsubscription;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription);
                  expect(data.eventTime).to.be.a('string');
                  expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                  expect(data.ip).to.be.a('string');
                  expect(data.ip).to.be("165.87.3.15");
  
                        }
              }
            {
              let dataCtr = data.opened;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetContactCampaignStatsOpened);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.count).to.be.a('number');
                expect(data.count).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                expect(data.ip).to.be.a('string');
                expect(data.ip).to.be("165.87.3.15");

                      }
            }
            {
              let dataCtr = data.clicked;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetContactCampaignStatsClicked);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                {
                  let dataCtr = data.links;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsLinks);
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(1);
                    expect(data.eventTime).to.be.a('string');
                    expect(data.eventTime).to.be("2017-03-12T20:15:13Z");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("165.87.3.15");
                    expect(data.url).to.be.a('string');
                    expect(data.url).to.be("www.myshop.com");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.transacAttributes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetContactCampaignStatsTransacAttributes);
                expect(data.orderDate).to.be.a(Date);
                expect(data.orderDate).to.be(2017-03-12);
                expect(data.orderPrice).to.be.a('number');
                expect(data.orderPrice).to.be(24.99);
                expect(data.orderId).to.be.a('number');
                expect(data.orderId).to.be(248);

                      }
            }
            {
              let dataCtr = data.delivered;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(3);
                expect(data.eventTime).to.be.a('string');
                expect(data.eventTime).to.be("2017-03-12T20:15:13Z");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContacts', function() {
        it('should call getContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getContacts call and complete the assertions
          /*
          var opts = {};
          opts.limit = 50;
          opts.offset = 0;
          opts.modifiedSince = "modifiedSince_example";
          opts.sort = "desc";

          instance.getContacts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetContacts);
            {
              let dataCtr = data.contacts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(17655);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactsFromList', function() {
        it('should call getContactsFromList successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactsFromList call and complete the assertions
          /*
          var listId = 789;
          var opts = {};
          opts.modifiedSince = "modifiedSince_example";
          opts.limit = 50;
          opts.offset = 0;
          opts.sort = "desc";

          instance.getContactsFromList(listId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetContacts);
            {
              let dataCtr = data.contacts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(17655);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFolder', function() {
        it('should call getFolder successfully', function(done) {
          // TODO: uncomment, update parameter values for getFolder call and complete the assertions
          /*
          var folderId = 789;

          instance.getFolder(folderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetFolder);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(2);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Magento Customers");
            expect(data.totalBlacklisted).to.be.a('number');
            expect(data.totalBlacklisted).to.be(32);
            expect(data.totalSubscribers).to.be.a('number');
            expect(data.totalSubscribers).to.be(19777);
            expect(data.uniqueSubscribers).to.be.a('number');
            expect(data.uniqueSubscribers).to.be(16222);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFolderLists', function() {
        it('should call getFolderLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getFolderLists call and complete the assertions
          /*
          var folderId = 789;
          var opts = {};
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "desc";

          instance.getFolderLists(folderId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetFolderLists);
            {
              let dataCtr = data.lists;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(6);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFolders', function() {
        it('should call getFolders successfully', function(done) {
          // TODO: uncomment, update parameter values for getFolders call and complete the assertions
          /*
          var limit = 10;
          var offset = 0;
          var opts = {};
          opts.sort = "desc";

          instance.getFolders(limit, offset, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetFolders);
            {
              let dataCtr = data.folders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(10);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getList', function() {
        it('should call getList successfully', function(done) {
          // TODO: uncomment, update parameter values for getList call and complete the assertions
          /*
          var listId = 789;

          instance.getList(listId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetExtendedList);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(23);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Magento Customers - EN");
            expect(data.totalBlacklisted).to.be.a('number');
            expect(data.totalBlacklisted).to.be(13);
            expect(data.totalSubscribers).to.be.a('number');
            expect(data.totalSubscribers).to.be(1776);
            expect(data.uniqueSubscribers).to.be.a('number');
            expect(data.uniqueSubscribers).to.be(1789);
            expect(data.folderId).to.be.a('number');
            expect(data.folderId).to.be(2);
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("2017-03-13T17:05:09Z");
            {
              let dataCtr = data.campaignStats;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetExtendedListCampaignStats);
                expect(data.campaignId).to.be.a('number');
                expect(data.campaignId).to.be(143);
                expect(data.stats).to.be.a(SibApiV3Sdk.GetCampaignStats);
                      expect(data.stats.listId).to.be.a('number');
                  expect(data.stats.listId).to.be(2);
                  expect(data.stats.uniqueClicks).to.be.a('number');
                  expect(data.stats.uniqueClicks).to.be(2300);
                  expect(data.stats.clickers).to.be.a('number');
                  expect(data.stats.clickers).to.be(2665);
                  expect(data.stats.complaints).to.be.a('number');
                  expect(data.stats.complaints).to.be(1);
                  expect(data.stats.delivered).to.be.a('number');
                  expect(data.stats.delivered).to.be(19765);
                  expect(data.stats.sent).to.be.a('number');
                  expect(data.stats.sent).to.be(19887);
                  expect(data.stats.softBounces).to.be.a('number');
                  expect(data.stats.softBounces).to.be(100);
                  expect(data.stats.hardBounces).to.be.a('number');
                  expect(data.stats.hardBounces).to.be(87);
                  expect(data.stats.uniqueViews).to.be.a('number');
                  expect(data.stats.uniqueViews).to.be(7779);
                  expect(data.stats.trackableViews).to.be.a('number');
                  expect(data.stats.trackableViews).to.be(5661);
                  expect(data.stats.trackableViewsRate).to.be.a('number');
                  expect(data.stats.trackableViewsRate).to.be(23.45);
                  expect(data.stats.estimatedViews).to.be.a('number');
                  expect(data.stats.estimatedViews).to.be(560);
                  expect(data.stats.unsubscriptions).to.be.a('number');
                  expect(data.stats.unsubscriptions).to.be(2);
                  expect(data.stats.viewed).to.be.a('number');
                  expect(data.stats.viewed).to.be(8999);
                  expect(data.stats.deferred).to.be.a('number');
                  expect(data.stats.deferred).to.be(30);
                  expect(data.stats.returnBounce).to.be.a('number');
                  expect(data.stats.returnBounce).to.be(5);

                      }
            }
            expect(data.dynamicList).to.be.a('boolean');
            expect(data.dynamicList).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLists', function() {
        it('should call getLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getLists call and complete the assertions
          /*
          var opts = {};
          opts.limit = 10;
          opts.offset = 0;
          opts.sort = "desc";

          instance.getLists(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetLists);
            {
              let dataCtr = data.lists;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(150);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('importContacts', function() {
        it('should call importContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for importContacts call and complete the assertions
          /*
          var requestContactImport = new SibApiV3Sdk.RequestContactImport();
          requestContactImport.fileUrl = "https://importfile.domain.com";
          requestContactImport.fileBody = "NAME;SURNAME;EMAIL
Smith;John;john.smith@example.com
Roger;Ellie;ellie36@example.com";
          requestContactImport.jsonBody = [{"email":"ndicky0@ocn.ne.jp","attributes":{"LNAME":"Noemi","FNAME":"Dicky","COUNTRY":"DE","BIRTHDAY":"11/02/1989","PREFERED_COLOR":"BLACK"}}];
          requestContactImport.listIds = [76];
          requestContactImport.notifyUrl = "http://requestb.in/173lyyx1";
          requestContactImport.newList = new SibApiV3Sdk.RequestContactImportNewList();
          requestContactImport.newList.listName = "ContactImport - 2017-05";
          requestContactImport.newList.folderId = 2;
          requestContactImport.emailBlacklist = false;
          requestContactImport.smsBlacklist = false;
          requestContactImport.updateExistingContacts = true;
          requestContactImport.emptyContactsAttributes = true;

          instance.importContacts(requestContactImport).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreatedProcessId);
            expect(data.processId).to.be.a('number');
            expect(data.processId).to.be(78);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeContactFromList', function() {
        it('should call removeContactFromList successfully', function(done) {
          // TODO: uncomment, update parameter values for removeContactFromList call and complete the assertions
          /*
          var listId = 789;
          var contactEmails = new SibApiV3Sdk.RemoveContactFromList();
          contactEmails.emails = ["john.smith@contact.com OR 151"];
          contactEmails.ids = [121];
          contactEmails.all = false;

          instance.removeContactFromList(listId, contactEmails).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.PostContactInfo);
            expect(data.contacts).to.be.a(SibApiV3Sdk.PostContactInfoContacts);
                  {
                let dataCtr = data.contacts.success;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("jeff32@example.com, jim56@example.com");
                }
              }
              {
                let dataCtr = data.contacts.failure;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("jeff32@example.com, jim56@example.com");
                }
              }
              expect(data.contacts.total).to.be.a('number');
              expect(data.contacts.total).to.be(27);
              expect(data.contacts.processId).to.be.a('number');
              expect(data.contacts.processId).to.be(78);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestContactExport', function() {
        it('should call requestContactExport successfully', function(done) {
          // TODO: uncomment, update parameter values for requestContactExport call and complete the assertions
          /*
          var requestContactExport = new SibApiV3Sdk.RequestContactExport();
          requestContactExport.exportAttributes = ["NAME"];
          requestContactExport.customContactFilter = new SibApiV3Sdk.RequestContactExportCustomContactFilter();
          requestContactExport.customContactFilter.actionForContacts = "allContacts";
          requestContactExport.customContactFilter.actionForEmailCampaigns = "openers";
          requestContactExport.customContactFilter.actionForSmsCampaigns = "hardBounces";
          requestContactExport.customContactFilter.listId = 2;
          requestContactExport.customContactFilter.emailCampaignId = 12;
          requestContactExport.customContactFilter.smsCampaignId = 12;
          requestContactExport.notifyUrl = "http://requestb.in/173lyyx1";

          instance.requestContactExport(requestContactExport).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreatedProcessId);
            expect(data.processId).to.be.a('number');
            expect(data.processId).to.be(78);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAttribute', function() {
        it('should call updateAttribute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAttribute call
          /*
          var attributeCategory = "attributeCategory_example";
          var attributeName = "attributeName_example";
          var updateAttribute = new SibApiV3Sdk.UpdateAttribute();
          updateAttribute.value = "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]";
          updateAttribute.enumeration = [new SibApiV3Sdk.UpdateAttributeEnumeration()];
          updateAttribute.enumeration[0].value = 1;
          updateAttribute.enumeration[0].label = "Men";

          instance.updateAttribute(attributeCategory, attributeName, updateAttribute).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBatchContacts', function() {
        it('should call updateBatchContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBatchContacts call
          /*
          var updateBatchContacts = new SibApiV3Sdk.UpdateBatchContacts();
          updateBatchContacts.contacts = [new SibApiV3Sdk.UpdateBatchContactsContacts()];
          updateBatchContacts.contacts[0].email = "elly@example.com";
          updateBatchContacts.contacts[0].id = 31;
          updateBatchContacts.contacts[0].sms = "+91xxxxxxxxxx";
          updateBatchContacts.contacts[0].attributes = {"EMAIL":"newemail@domain.com","FNAME":"Ellie","LNAME":"Roger"};
          updateBatchContacts.contacts[0].emailBlacklisted = false;
          updateBatchContacts.contacts[0].smsBlacklisted = true;
          updateBatchContacts.contacts[0].listIds = [65];
          updateBatchContacts.contacts[0].unlinkListIds = [36];
          updateBatchContacts.contacts[0].smtpBlacklistSender = [""];

          instance.updateBatchContacts(updateBatchContacts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateContact', function() {
        it('should call updateContact successfully', function(done) {
          // TODO: uncomment, update parameter values for updateContact call
          /*
          var identifier = "identifier_example";
          var updateContact = new SibApiV3Sdk.UpdateContact();
          updateContact.attributes = {"EMAIL":"newemail@domain.com","FNAME":"Ellie","LNAME":"Roger"};
          updateContact.emailBlacklisted = false;
          updateContact.smsBlacklisted = true;
          updateContact.listIds = [65];
          updateContact.unlinkListIds = [36];
          updateContact.smtpBlacklistSender = [""];

          instance.updateContact(identifier, updateContact).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateFolder', function() {
        it('should call updateFolder successfully', function(done) {
          // TODO: uncomment, update parameter values for updateFolder call
          /*
          var folderId = 789;
          var updateFolder = new SibApiV3Sdk.CreateUpdateFolder();
          updateFolder.name = "Wordpress Contacts";

          instance.updateFolder(folderId, updateFolder).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateList', function() {
        it('should call updateList successfully', function(done) {
          // TODO: uncomment, update parameter values for updateList call
          /*
          var listId = 789;
          var updateList = new SibApiV3Sdk.UpdateList();
          updateList.name = "Magento Customer - ES";
          updateList.folderId = 2;

          instance.updateList(listId, updateList).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
