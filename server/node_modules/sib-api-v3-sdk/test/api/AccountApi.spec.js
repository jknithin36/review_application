/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.AccountApi();
  });

  describe('(package)', function() {
    describe('AccountApi', function() {
      describe('getAccount', function() {
        it('should call getAccount successfully', function(done) {
          // TODO: uncomment getAccount call and complete the assertions
          /*

          instance.getAccount().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetAccount);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("john.smith@example.com");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("John");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Smith");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("MyCompany");
            expect(data.address).to.be.a(SibApiV3Sdk.GetExtendedClientAddress);
                  expect(data.address.street).to.be.a('string');
              expect(data.address.street).to.be("47 Harbour Street");
              expect(data.address.city).to.be.a('string');
              expect(data.address.city).to.be("New-York");
              expect(data.address.zipCode).to.be.a('string');
              expect(data.address.zipCode).to.be("9867");
              expect(data.address.country).to.be.a('string');
              expect(data.address.country).to.be("United States of America");
            {
              let dataCtr = data.plan;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetAccountPlan);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("subscription");
                expect(data.creditsType).to.be.a('string');
                expect(data.creditsType).to.be("sendLimit");
                expect(data.credits).to.be.a('number');
                expect(data.credits).to.be(8755.0);
                expect(data.startDate).to.be.a(Date);
                expect(data.startDate).to.be(2016-12-31);
                expect(data.endDate).to.be.a(Date);
                expect(data.endDate).to.be(2017-01-31);
                expect(data.userLimit).to.be.a('number');
                expect(data.userLimit).to.be(10);

                      }
            }
            expect(data.relay).to.be.a(SibApiV3Sdk.GetAccountRelay);
                  expect(data.relay.enabled).to.be.a('boolean');
              expect(data.relay.enabled).to.be(true);
              expect(data.relay.data).to.be.a(SibApiV3Sdk.GetAccountRelayData);
                    expect(data.relay.data.userName).to.be.a('string');
                expect(data.relay.data.userName).to.be("john.smith@example.com");
                expect(data.relay.data.relay).to.be.a('string');
                expect(data.relay.data.relay).to.be("relay.domain.com");
                expect(data.relay.data.port).to.be.a('number');
                expect(data.relay.data.port).to.be(125);
            expect(data.marketingAutomation).to.be.a(SibApiV3Sdk.GetAccountMarketingAutomation);
                  expect(data.marketingAutomation.key).to.be.a('string');
              expect(data.marketingAutomation.key).to.be("iso05aopqych87ysy0jymf");
              expect(data.marketingAutomation.enabled).to.be.a('boolean');
              expect(data.marketingAutomation.enabled).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
