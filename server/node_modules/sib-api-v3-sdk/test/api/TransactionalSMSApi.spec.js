/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.TransactionalSMSApi();
  });

  describe('(package)', function() {
    describe('TransactionalSMSApi', function() {
      describe('getSmsEvents', function() {
        it('should call getSmsEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getSmsEvents call and complete the assertions
          /*
          var opts = {};
          opts.limit = 50;
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";
          opts.offset = 0;
          opts.days = 789;
          opts.phoneNumber = "phoneNumber_example";
          opts.event = "event_example";
          opts.tags = "tags_example";
          opts.sort = "desc";

          instance.getSmsEvents(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetSmsEventReport);
            {
              let dataCtr = data.events;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetSmsEventReportEvents);
                expect(data.phoneNumber).to.be.a('string');
                expect(data.phoneNumber).to.be("00189001094");
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("2017-03-12T12:30:00Z");
                expect(data.messageId).to.be.a('string');
                expect(data.messageId).to.be("1472640582425378");
                expect(data.event).to.be.a('string');
                expect(data.event).to.be("accepted");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("Message is undeliverable due to an incorrect / invalid / blacklisted / permanently barred MSISDN for this operator");
                expect(data.reply).to.be.a('string');
                expect(data.reply).to.be("");
                expect(data.tag).to.be.a('string');
                expect(data.tag).to.be("CabWaiting");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransacAggregatedSmsReport', function() {
        it('should call getTransacAggregatedSmsReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransacAggregatedSmsReport call and complete the assertions
          /*
          var opts = {};
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";
          opts.days = 789;
          opts.tag = "tag_example";

          instance.getTransacAggregatedSmsReport(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetTransacAggregatedSmsReport);
            expect(data.range).to.be.a('string');
            expect(data.range).to.be("2016-09-08|2017-04-06");
            expect(data.requests).to.be.a('number');
            expect(data.requests).to.be(263);
            expect(data.delivered).to.be.a('number');
            expect(data.delivered).to.be(249);
            expect(data.hardBounces).to.be.a('number');
            expect(data.hardBounces).to.be(1);
            expect(data.softBounces).to.be.a('number');
            expect(data.softBounces).to.be(4);
            expect(data.blocked).to.be.a('number');
            expect(data.blocked).to.be(2);
            expect(data.unsubscribed).to.be.a('number');
            expect(data.unsubscribed).to.be(6);
            expect(data.replied).to.be.a('number');
            expect(data.replied).to.be(12);
            expect(data.accepted).to.be.a('number');
            expect(data.accepted).to.be(252);
            expect(data.rejected).to.be.a('number');
            expect(data.rejected).to.be(8);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransacSmsReport', function() {
        it('should call getTransacSmsReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransacSmsReport call and complete the assertions
          /*
          var opts = {};
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";
          opts.days = 789;
          opts.tag = "tag_example";
          opts.sort = "desc";

          instance.getTransacSmsReport(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetTransacSmsReport);
            {
              let dataCtr = data.reports;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetTransacSmsReportReports);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2017-03-17);
                expect(data.requests).to.be.a('number');
                expect(data.requests).to.be(87);
                expect(data.delivered).to.be.a('number');
                expect(data.delivered).to.be(85);
                expect(data.hardBounces).to.be.a('number');
                expect(data.hardBounces).to.be(1);
                expect(data.softBounces).to.be.a('number');
                expect(data.softBounces).to.be(1);
                expect(data.blocked).to.be.a('number');
                expect(data.blocked).to.be(0);
                expect(data.unsubscribed).to.be.a('number');
                expect(data.unsubscribed).to.be(1);
                expect(data.replied).to.be.a('number');
                expect(data.replied).to.be(2);
                expect(data.accepted).to.be.a('number');
                expect(data.accepted).to.be(85);
                expect(data.rejected).to.be.a('number');
                expect(data.rejected).to.be(1);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendTransacSms', function() {
        it('should call sendTransacSms successfully', function(done) {
          // TODO: uncomment, update parameter values for sendTransacSms call and complete the assertions
          /*
          var sendTransacSms = new SibApiV3Sdk.SendTransacSms();
          sendTransacSms.sender = "MyShop";
          sendTransacSms.recipient = "33689965433";
          sendTransacSms.content = "Enter this code:CCJJG8 to validate your account";
          sendTransacSms.type = "marketing";
          sendTransacSms.tag = "accountValidation";
          sendTransacSms.webUrl = "http://requestb.in/173lyyx1";
          sendTransacSms.unicodeEnabled = true;

          instance.sendTransacSms(sendTransacSms).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.SendSms);
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("ab1cde2fgh3i4jklmno");
            expect(data.messageId).to.be.a('number');
            expect(data.messageId).to.be(1511882900176220);
            expect(data.smsCount).to.be.a('number');
            expect(data.smsCount).to.be(2);
            expect(data.usedCredits).to.be.a('number');
            expect(data.usedCredits).to.be(0.7);
            expect(data.remainingCredits).to.be.a('number');
            expect(data.remainingCredits).to.be(82.85);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
