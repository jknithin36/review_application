/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.SendersApi();
  });

  describe('(package)', function() {
    describe('SendersApi', function() {
      describe('createSender', function() {
        it('should call createSender successfully', function(done) {
          // TODO: uncomment, update parameter values for createSender call and complete the assertions
          /*
          var opts = {};
          opts.sender = new SibApiV3Sdk.CreateSender();
          opts.sender.name = "Newsletter";
          opts.sender.email = "newsletter@mycompany.com";
          opts.sender.ips = [new SibApiV3Sdk.CreateSenderIps()];
          opts.sender.ips[0].ip = "123.98.689.7";
          opts.sender.ips[0].domain = "mycompany.com";
          opts.sender.ips[0].weight = 50;

          instance.createSender(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateSenderModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(5);
            expect(data.spfError).to.be.a('boolean');
            expect(data.spfError).to.be(true);
            expect(data.dkimError).to.be.a('boolean');
            expect(data.dkimError).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSender', function() {
        it('should call deleteSender successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSender call
          /*
          var senderId = 789;

          instance.deleteSender(senderId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIps', function() {
        it('should call getIps successfully', function(done) {
          // TODO: uncomment getIps call and complete the assertions
          /*

          instance.getIps().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetIps);
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetIp);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(3);
                expect(data.ip).to.be.a('string');
                expect(data.ip).to.be("123.65.8.22");
                expect(data.active).to.be.a('boolean');
                expect(data.active).to.be(true);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("mailing.myshop.com");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIpsFromSender', function() {
        it('should call getIpsFromSender successfully', function(done) {
          // TODO: uncomment, update parameter values for getIpsFromSender call and complete the assertions
          /*
          var senderId = 789;

          instance.getIpsFromSender(senderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetIpsFromSender);
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetIpFromSender);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(3);
                expect(data.ip).to.be.a('string');
                expect(data.ip).to.be("123.65.8.22");
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("mailing.myshop.dom");
                expect(data.weight).to.be.a('number');
                expect(data.weight).to.be(75);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSenders', function() {
        it('should call getSenders successfully', function(done) {
          // TODO: uncomment, update parameter values for getSenders call and complete the assertions
          /*
          var opts = {};
          opts.ip = "ip_example";
          opts.domain = "domain_example";

          instance.getSenders(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetSendersList);
            {
              let dataCtr = data.senders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SibApiV3Sdk.GetSendersListSenders);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Marketing");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("marketing@mycompany.com");
                expect(data.active).to.be.a('boolean');
                expect(data.active).to.be(false);
                {
                  let dataCtr = data.ips;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SibApiV3Sdk.GetSendersListIps);
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("123.98.689.7");
                    expect(data.domain).to.be.a('string');
                    expect(data.domain).to.be("mycompany.com");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(50);
    
                          }
                }

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSender', function() {
        it('should call updateSender successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSender call
          /*
          var senderId = 789;
          var opts = {};
          opts.sender = new SibApiV3Sdk.UpdateSender();
          opts.sender.name = "Newsletter";
          opts.sender.email = "newsletter@mycompany.com";
          opts.sender.ips = [new SibApiV3Sdk.CreateSenderIps()];
          opts.sender.ips[0].ip = "123.98.689.7";
          opts.sender.ips[0].domain = "mycompany.com";
          opts.sender.ips[0].weight = 50;

          instance.updateSender(senderId, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
