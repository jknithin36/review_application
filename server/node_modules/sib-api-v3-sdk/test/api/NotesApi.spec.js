/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.NotesApi();
  });

  describe('(package)', function() {
    describe('NotesApi', function() {
      describe('crmNotesGet', function() {
        it('should call crmNotesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for crmNotesGet call and complete the assertions
          /*
          var opts = {};
          opts.entity = "entity_example";
          opts.entityIds = "entityIds_example";
          opts.dateFrom = 56;
          opts.dateTo = 56;
          opts.offset = 789;
          opts.limit = 50;
          opts.sort = "sort_example";

          instance.crmNotesGet(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.NoteList);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('crmNotesIdDelete', function() {
        it('should call crmNotesIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for crmNotesIdDelete call
          /*
          var id = "id_example";

          instance.crmNotesIdDelete(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('crmNotesIdGet', function() {
        it('should call crmNotesIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for crmNotesIdGet call and complete the assertions
          /*
          var id = "id_example";

          instance.crmNotesIdGet(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.Note);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("61a5cd07ca1347c82306ad09");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("In communication with client for resolution of queries.");
            {
              let dataCtr = data.contactIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            {
              let dataCtr = data.dealIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.authorId).to.be.a(Object);
            expect(data.authorId).to.be({"id":"61a5ce58y5d4795761045991","email":"johndoe@example.com","locale":"en_GB","timezone":"Asia/Kolkata","name":{"fullName":"John Doe"}});
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2017-05-01T17:05:03.000Z);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(2017-05-01T17:05:03.000Z);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('crmNotesIdPatch', function() {
        it('should call crmNotesIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for crmNotesIdPatch call
          /*
          var id = "id_example";
          var body = new SibApiV3Sdk.NoteData();
          body.text = "In communication with client for resolution of queries.";
          body.contactIds = [247,1,2];
          body.dealIds = ["61a5ce58c5d4795761045990","61a5ce58c5d4795761045991"];
          body.companyIds = ["61a5ce58c5d4795761045990","61a5ce58c5d4795761045991"];

          instance.crmNotesIdPatch(id, body).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('crmNotesPost', function() {
        it('should call crmNotesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for crmNotesPost call and complete the assertions
          /*
          var body = new SibApiV3Sdk.NoteData();
          body.text = "In communication with client for resolution of queries.";
          body.contactIds = [247,1,2];
          body.dealIds = ["61a5ce58c5d4795761045990","61a5ce58c5d4795761045991"];
          body.companyIds = ["61a5ce58c5d4795761045990","61a5ce58c5d4795761045991"];

          instance.crmNotesPost(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.NoteId);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("61a5cd07ca1347c82306ad09");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
