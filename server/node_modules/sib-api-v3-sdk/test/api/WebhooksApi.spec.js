/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SibApiV3Sdk.WebhooksApi();
  });

  describe('(package)', function() {
    describe('WebhooksApi', function() {
      describe('createWebhook', function() {
        it('should call createWebhook successfully', function(done) {
          // TODO: uncomment, update parameter values for createWebhook call and complete the assertions
          /*
          var createWebhook = new SibApiV3Sdk.CreateWebhook();
          createWebhook.url = "http://requestb.in/173lyyx1";
          createWebhook.description = "Webhook triggered on unsubscription";
          createWebhook.events = ["unsubscribed"]"sent";
          createWebhook.type = "marketing";
          createWebhook.domain = "example.com";

          instance.createWebhook(createWebhook).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.CreateModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteWebhook', function() {
        it('should call deleteWebhook successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWebhook call
          /*
          var webhookId = 789;

          instance.deleteWebhook(webhookId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWebhook', function() {
        it('should call getWebhook successfully', function(done) {
          // TODO: uncomment, update parameter values for getWebhook call and complete the assertions
          /*
          var webhookId = 789;

          instance.getWebhook(webhookId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetWebhook);
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("http://requestb.in/173lyyx1");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(654);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Webhook triggered on campaign openings");
            {
              let dataCtr = data.events;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("opens,clicks");
              }
            }
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("marketing");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("2016-12-01T12:50:00Z");
            expect(data.modifiedAt).to.be.a('string');
            expect(data.modifiedAt).to.be("2017-05-12T13:15:00Z");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWebhooks', function() {
        it('should call getWebhooks successfully', function(done) {
          // TODO: uncomment, update parameter values for getWebhooks call and complete the assertions
          /*
          var opts = {};
          opts.type = "transactional";
          opts.sort = "desc";

          instance.getWebhooks(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SibApiV3Sdk.GetWebhooks);
            {
              let dataCtr = data.webhooks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateWebhook', function() {
        it('should call updateWebhook successfully', function(done) {
          // TODO: uncomment, update parameter values for updateWebhook call
          /*
          var webhookId = 789;
          var updateWebhook = new SibApiV3Sdk.UpdateWebhook();
          updateWebhook.url = "http://requestb.in/173lyyx1";
          updateWebhook.description = "Webhook triggered on contact hardbounce";
          updateWebhook.events = ["hardBounce"]"sent";
          updateWebhook.domain = "example.com";

          instance.updateWebhook(webhookId, updateWebhook).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
