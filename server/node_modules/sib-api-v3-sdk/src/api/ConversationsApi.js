/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body10', 'model/Body11', 'model/Body12', 'model/Body8', 'model/Body9', 'model/ConversationsMessage', 'model/ErrorModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body10'), require('../model/Body11'), require('../model/Body12'), require('../model/Body8'), require('../model/Body9'), require('../model/ConversationsMessage'), require('../model/ErrorModel'));
  } else {
    // Browser globals (root is window)
    if (!root.SibApiV3Sdk) {
      root.SibApiV3Sdk = {};
    }
    root.SibApiV3Sdk.ConversationsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body10, root.SibApiV3Sdk.Body11, root.SibApiV3Sdk.Body12, root.SibApiV3Sdk.Body8, root.SibApiV3Sdk.Body9, root.SibApiV3Sdk.ConversationsMessage, root.SibApiV3Sdk.ErrorModel);
  }
}(this, function(ApiClient, Body10, Body11, Body12, Body8, Body9, ConversationsMessage, ErrorModel) {
  'use strict';

  /**
   * Conversations service.
   * @module api/ConversationsApi
   * @version 8.5.0
   */

  /**
   * Constructs a new ConversationsApi. 
   * @alias module:api/ConversationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Sets agent’s status to online for 2-3 minutes
     * We recommend pinging this endpoint every minute for as long as the agent has to be considered online.
     * @param {module:model/Body12} body Agent fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.conversationsAgentOnlinePingPostWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling conversationsAgentOnlinePingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversations/agentOnlinePing', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets agent’s status to online for 2-3 minutes
     * We recommend pinging this endpoint every minute for as long as the agent has to be considered online.
     * @param {module:model/Body12} body Agent fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.conversationsAgentOnlinePingPost = function(body) {
      return this.conversationsAgentOnlinePingPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a message sent by an agent
     * Only agents’ messages can be deleted.
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.conversationsMessagesIdDeleteWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsMessagesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversations/messages/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a message sent by an agent
     * Only agents’ messages can be deleted.
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.conversationsMessagesIdDelete = function(id) {
      return this.conversationsMessagesIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a message
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsMessagesIdGetWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsMessagesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/messages/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a message
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsMessagesIdGet = function(id) {
      return this.conversationsMessagesIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a message sent by an agent
     * Only agents’ messages can be edited.
     * @param {String} id ID of the message
     * @param {Object} opts Optional parameters
     * @param {module:model/Body9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsMessagesIdPutWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsMessagesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/messages/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a message sent by an agent
     * Only agents’ messages can be edited.
     * @param {String} id ID of the message
     * @param {Object} opts Optional parameters
     * @param {module:model/Body9} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsMessagesIdPut = function(id, opts) {
      return this.conversationsMessagesIdPutWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a message as an agent
     * @param {module:model/Body8} body Message fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsMessagesPostWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling conversationsMessagesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/messages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a message as an agent
     * @param {module:model/Body8} body Message fields.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsMessagesPost = function(body) {
      return this.conversationsMessagesPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an automated message
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.conversationsPushedMessagesIdDeleteWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsPushedMessagesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversations/pushedMessages/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an automated message
     * @param {String} id ID of the message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.conversationsPushedMessagesIdDelete = function(id) {
      return this.conversationsPushedMessagesIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an automated message
     * @param {String} id ID of the message sent previously
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsPushedMessagesIdGetWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsPushedMessagesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/pushedMessages/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an automated message
     * @param {String} id ID of the message sent previously
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsPushedMessagesIdGet = function(id) {
      return this.conversationsPushedMessagesIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an automated message
     * @param {String} id ID of the message
     * @param {module:model/Body11} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsPushedMessagesIdPutWithHttpInfo = function(id, body) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsPushedMessagesIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling conversationsPushedMessagesIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/pushedMessages/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an automated message
     * @param {String} id ID of the message
     * @param {module:model/Body11} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsPushedMessagesIdPut = function(id, body) {
      return this.conversationsPushedMessagesIdPutWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an automated message to a visitor
     * Example of automated messages: order status, announce new features in your web app, etc.
     * @param {module:model/Body10} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response
     */
    this.conversationsPushedMessagesPostWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling conversationsPushedMessagesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsMessage;

      return this.apiClient.callApi(
        '/conversations/pushedMessages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send an automated message to a visitor
     * Example of automated messages: order status, announce new features in your web app, etc.
     * @param {module:model/Body10} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}
     */
    this.conversationsPushedMessagesPost = function(body) {
      return this.conversationsPushedMessagesPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
